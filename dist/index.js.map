{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["interface DetectionResult {\r\n  isAIGenerated: boolean;\r\n  confidence: number;\r\n  reasons: string[];\r\n  score: number;\r\n  perplexityScore: number;\r\n  burstinessScore: number;\r\n}\r\n\r\ninterface AnalysisMetrics {\r\n  perplexity: number;\r\n  burstiness: number;\r\n  averageWordsPerSentence: number;\r\n  sentenceVariability: number;\r\n  lexicalDiversity: number;\r\n  readabilityScore: number;\r\n  syntacticComplexity: number;\r\n  semanticCoherence: number;\r\n  nGramRepetition: number;\r\n  punctuationPatterns: number;\r\n  wordFrequencyDistribution: number;\r\n  transitionDensity: number;\r\n  formalityIndex: number;\r\n  vocabularyRichness: number;\r\n  contextualConsistency: number;\r\n}\r\n\r\nclass AITextDetector {\r\n  // Common words for frequency analysis\r\n  private commonWords = new Set([\r\n    \"the\",\r\n    \"be\",\r\n    \"to\",\r\n    \"of\",\r\n    \"and\",\r\n    \"a\",\r\n    \"in\",\r\n    \"that\",\r\n    \"have\",\r\n    \"i\",\r\n    \"it\",\r\n    \"for\",\r\n    \"not\",\r\n    \"on\",\r\n    \"with\",\r\n    \"he\",\r\n    \"as\",\r\n    \"you\",\r\n    \"do\",\r\n    \"at\",\r\n    \"this\",\r\n    \"but\",\r\n    \"his\",\r\n    \"by\",\r\n    \"from\",\r\n    \"they\",\r\n    \"she\",\r\n    \"or\",\r\n    \"an\",\r\n    \"will\",\r\n    \"my\",\r\n    \"one\",\r\n    \"all\",\r\n    \"would\",\r\n    \"there\",\r\n    \"their\",\r\n  ]);\r\n\r\n  // AI-typical phrases and patterns\r\n  private aiPatterns = [\r\n    /\\b(it is important to note|it should be noted|it is worth mentioning|it is crucial to understand)\\b/gi,\r\n    /\\b(furthermore|moreover|additionally|consequently|therefore|thus|hence|nonetheless|nevertheless)\\b/gi,\r\n    /\\b(in conclusion|to summarize|in summary|overall|ultimately|essentially)\\b/gi,\r\n    /\\b(various|numerous|several|multiple|different|diverse|wide range of)\\b/gi,\r\n    /\\b(enhance|optimize|facilitate|utilize|implement|establish|maintain|ensure)\\b/gi,\r\n    /\\b(significant|substantial|considerable|notable|remarkable|extensive)\\b/gi,\r\n    /\\b(comprehensive|thorough|detailed|in-depth|multifaceted)\\b/gi,\r\n    /\\b(approach|strategy|methodology|framework|process|procedure)\\b/gi,\r\n  ];\r\n\r\n  // Transition words for density analysis\r\n  private transitionWords = [\r\n    \"however\",\r\n    \"furthermore\",\r\n    \"moreover\",\r\n    \"additionally\",\r\n    \"consequently\",\r\n    \"therefore\",\r\n    \"thus\",\r\n    \"hence\",\r\n    \"nevertheless\",\r\n    \"nonetheless\",\r\n    \"meanwhile\",\r\n    \"subsequently\",\r\n    \"ultimately\",\r\n    \"essentially\",\r\n    \"specifically\",\r\n    \"particularly\",\r\n    \"notably\",\r\n    \"importantly\",\r\n    \"significantly\",\r\n    \"interestingly\",\r\n    \"surprisingly\",\r\n    \"accordingly\",\r\n    \"alternatively\",\r\n    \"comparatively\",\r\n    \"conversely\",\r\n    \"similarly\",\r\n    \"likewise\",\r\n    \"meanwhile\",\r\n    \"simultaneously\",\r\n  ];\r\n\r\n  // Sophisticated vocabulary often used by AI\r\n  private sophisticatedWords = [\r\n    \"utilize\",\r\n    \"facilitate\",\r\n    \"demonstrate\",\r\n    \"implement\",\r\n    \"establish\",\r\n    \"maintain\",\r\n    \"require\",\r\n    \"appropriate\",\r\n    \"significant\",\r\n    \"considerable\",\r\n    \"substantial\",\r\n    \"comprehensive\",\r\n    \"extensive\",\r\n    \"innovative\",\r\n    \"strategic\",\r\n    \"optimize\",\r\n    \"enhance\",\r\n    \"leverage\",\r\n    \"paradigm\",\r\n    \"methodology\",\r\n    \"framework\",\r\n    \"initiative\",\r\n    \"synergy\",\r\n  ];\r\n\r\n  public detectAIText(text: string): DetectionResult {\r\n    if (!text || text.trim().length === 0) {\r\n      throw new Error(\"Text cannot be empty\");\r\n    }\r\n\r\n    if (text.trim().length < 50) {\r\n      throw new Error(\r\n        \"Text too short for reliable analysis (minimum 50 characters)\"\r\n      );\r\n    }\r\n\r\n    const metrics = this.analyzeText(text);\r\n    const score = this.calculateAdvancedAIScore(metrics);\r\n    const isAIGenerated = score > 0.65; // Adjusted threshold\r\n    const confidence = Math.round(score * 100) / 100;\r\n    const reasons = this.generateDetailedReasons(metrics, score);\r\n\r\n    return {\r\n      isAIGenerated,\r\n      confidence,\r\n      reasons,\r\n      score,\r\n      perplexityScore: metrics.perplexity,\r\n      burstinessScore: metrics.burstiness,\r\n    };\r\n  }\r\n\r\n  private analyzeText(text: string): AnalysisMetrics {\r\n    const sentences = this.splitIntoSentences(text);\r\n    const words = this.tokenizeWords(text);\r\n    const cleanWords = words.filter((word) => word.length > 2);\r\n\r\n    return {\r\n      perplexity: this.calculatePerplexity(words),\r\n      burstiness: this.calculateBurstiness(sentences),\r\n      averageWordsPerSentence: this.calculateAverageWordsPerSentence(sentences),\r\n      sentenceVariability: this.calculateSentenceVariability(sentences),\r\n      lexicalDiversity: this.calculateLexicalDiversity(cleanWords),\r\n      readabilityScore: this.calculateReadabilityScore(text, sentences, words),\r\n      syntacticComplexity: this.calculateSyntacticComplexity(sentences),\r\n      semanticCoherence: this.calculateSemanticCoherence(sentences),\r\n      nGramRepetition: this.calculateNGramRepetition(words),\r\n      punctuationPatterns: this.analyzePunctuationPatterns(text),\r\n      wordFrequencyDistribution:\r\n        this.analyzeWordFrequencyDistribution(cleanWords),\r\n      transitionDensity: this.calculateTransitionDensity(cleanWords),\r\n      formalityIndex: this.calculateFormalityIndex(cleanWords),\r\n      vocabularyRichness: this.calculateVocabularyRichness(cleanWords),\r\n      contextualConsistency: this.calculateContextualConsistency(sentences),\r\n    };\r\n  }\r\n\r\n  private tokenizeWords(text: string): string[] {\r\n    return text\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s'-]/g, \" \")\r\n      .split(/\\s+/)\r\n      .filter((word) => word.length > 0);\r\n  }\r\n\r\n  private splitIntoSentences(text: string): string[] {\r\n    return text\r\n      .split(/[.!?]+/)\r\n      .map((s) => s.trim())\r\n      .filter((s) => s.length > 0);\r\n  }\r\n\r\n  // Advanced perplexity calculation (simplified statistical model)\r\n  private calculatePerplexity(words: string[]): number {\r\n    const wordCounts = new Map<string, number>();\r\n    const bigramCounts = new Map<string, number>();\r\n\r\n    // Count unigrams\r\n    words.forEach((word) => {\r\n      wordCounts.set(word, (wordCounts.get(word) || 0) + 1);\r\n    });\r\n\r\n    // Count bigrams\r\n    for (let i = 0; i < words.length - 1; i++) {\r\n      const bigram = `${words[i]} ${words[i + 1]}`;\r\n      bigramCounts.set(bigram, (bigramCounts.get(bigram) || 0) + 1);\r\n    }\r\n\r\n    // Calculate simplified perplexity based on word predictability\r\n    let totalSurprise = 0;\r\n    for (let i = 1; i < words.length; i++) {\r\n      const currentWord = words[i];\r\n      const prevWord = words[i - 1];\r\n      const bigram = `${prevWord} ${currentWord}`;\r\n\r\n      const wordFreq = wordCounts.get(currentWord) || 1;\r\n      const bigramFreq = bigramCounts.get(bigram) || 1;\r\n      const prevWordFreq = wordCounts.get(prevWord) || 1;\r\n\r\n      // Higher frequency = lower surprise = lower perplexity\r\n      const conditionalProb = bigramFreq / prevWordFreq;\r\n      const surprise = -Math.log2(Math.max(conditionalProb, 0.001));\r\n      totalSurprise += surprise;\r\n    }\r\n\r\n    return totalSurprise / Math.max(words.length - 1, 1);\r\n  }\r\n\r\n  // Burstiness measures variation in sentence lengths\r\n  private calculateBurstiness(sentences: string[]): number {\r\n    if (sentences.length < 2) return 0;\r\n\r\n    const lengths = sentences.map((s) => s.split(/\\s+/).length);\r\n    const mean = lengths.reduce((a, b) => a + b, 0) / lengths.length;\r\n    const variance =\r\n      lengths.reduce((sum, len) => sum + Math.pow(len - mean, 2), 0) /\r\n      lengths.length;\r\n    const stdDev = Math.sqrt(variance);\r\n\r\n    // Burstiness formula: (σ - μ) / (σ + μ)\r\n    return (stdDev - mean) / (stdDev + mean);\r\n  }\r\n\r\n  private calculateLexicalDiversity(words: string[]): number {\r\n    const uniqueWords = new Set(words);\r\n    return uniqueWords.size / words.length;\r\n  }\r\n\r\n  private calculateReadabilityScore(\r\n    text: string,\r\n    sentences: string[],\r\n    words: string[]\r\n  ): number {\r\n    const avgWordsPerSentence = words.length / sentences.length;\r\n    const complexWords = words.filter((word) => word.length > 6).length;\r\n    const complexWordRatio = complexWords / words.length;\r\n\r\n    // Simplified Flesch-Kincaid-like formula\r\n    return 206.835 - 1.015 * avgWordsPerSentence - 84.6 * complexWordRatio;\r\n  }\r\n\r\n  private calculateSyntacticComplexity(sentences: string[]): number {\r\n    let totalComplexity = 0;\r\n\r\n    sentences.forEach((sentence) => {\r\n      const words = sentence.split(/\\s+/);\r\n      let complexity = 0;\r\n\r\n      // Count subordinate clauses (simplified)\r\n      complexity += (\r\n        sentence.match(\r\n          /\\b(that|which|who|whom|whose|when|where|while|although|because|since|if|unless|until)\\b/gi\r\n        ) || []\r\n      ).length;\r\n\r\n      // Count conjunctions\r\n      complexity += (sentence.match(/\\b(and|but|or|yet|so|for|nor)\\b/gi) || [])\r\n        .length;\r\n\r\n      // Penalize very long sentences\r\n      if (words.length > 30) complexity += 2;\r\n      if (words.length > 40) complexity += 3;\r\n\r\n      totalComplexity += complexity / Math.max(words.length, 1);\r\n    });\r\n\r\n    return totalComplexity / sentences.length;\r\n  }\r\n\r\n  private calculateSemanticCoherence(sentences: string[]): number {\r\n    if (sentences.length < 2) return 1;\r\n\r\n    let coherenceScore = 0;\r\n\r\n    for (let i = 1; i < sentences.length; i++) {\r\n      const prevWords = new Set(this.tokenizeWords(sentences[i - 1]));\r\n      const currWords = new Set(this.tokenizeWords(sentences[i]));\r\n\r\n      // Calculate word overlap between consecutive sentences\r\n      const intersection = new Set(\r\n        [...prevWords].filter((x) => currWords.has(x))\r\n      );\r\n      const union = new Set([...prevWords, ...currWords]);\r\n\r\n      coherenceScore += intersection.size / union.size;\r\n    }\r\n\r\n    return coherenceScore / (sentences.length - 1);\r\n  }\r\n\r\n  private calculateNGramRepetition(words: string[]): number {\r\n    const trigrams = new Map<string, number>();\r\n\r\n    for (let i = 0; i < words.length - 2; i++) {\r\n      const trigram = `${words[i]} ${words[i + 1]} ${words[i + 2]}`;\r\n      trigrams.set(trigram, (trigrams.get(trigram) || 0) + 1);\r\n    }\r\n\r\n    const repeatedTrigrams = Array.from(trigrams.values()).filter(\r\n      (count) => count > 1\r\n    );\r\n    return repeatedTrigrams.length / Math.max(trigrams.size, 1);\r\n  }\r\n\r\n  private analyzePunctuationPatterns(text: string): number {\r\n    const punctuation = text.match(/[.!?;:,]/g) || [];\r\n    const words = this.tokenizeWords(text);\r\n\r\n    if (words.length === 0) return 0;\r\n\r\n    // AI often has consistent punctuation patterns\r\n    const punctuationRatio = punctuation.length / words.length;\r\n    const commaRatio = (text.match(/,/g) || []).length / words.length;\r\n    const semicolonRatio = (text.match(/;/g) || []).length / words.length;\r\n\r\n    // AI tends to use moderate punctuation\r\n    let score = 0;\r\n    if (punctuationRatio > 0.05 && punctuationRatio < 0.15) score += 0.3;\r\n    if (commaRatio > 0.02 && commaRatio < 0.08) score += 0.3;\r\n    if (semicolonRatio > 0.001 && semicolonRatio < 0.01) score += 0.2;\r\n\r\n    return score;\r\n  }\r\n\r\n  private analyzeWordFrequencyDistribution(words: string[]): number {\r\n    const wordCounts = new Map<string, number>();\r\n    words.forEach((word) => {\r\n      wordCounts.set(word, (wordCounts.get(word) || 0) + 1);\r\n    });\r\n\r\n    const frequencies = Array.from(wordCounts.values()).sort((a, b) => b - a);\r\n\r\n    // Zipf's law analysis - natural text follows specific distribution\r\n    let zipfScore = 0;\r\n    for (let i = 1; i < Math.min(frequencies.length, 10); i++) {\r\n      const expected = frequencies[0] / (i + 1);\r\n      const actual = frequencies[i];\r\n      const ratio = Math.min(actual, expected) / Math.max(actual, expected);\r\n      zipfScore += ratio;\r\n    }\r\n\r\n    return zipfScore / Math.min(frequencies.length - 1, 9);\r\n  }\r\n\r\n  private calculateTransitionDensity(words: string[]): number {\r\n    const transitionCount = words.filter((word) =>\r\n      this.transitionWords.some((tw) => word.includes(tw))\r\n    ).length;\r\n\r\n    return (transitionCount / words.length) * 100;\r\n  }\r\n\r\n  private calculateFormalityIndex(words: string[]): number {\r\n    const sophisticatedCount = words.filter((word) =>\r\n      this.sophisticatedWords.includes(word)\r\n    ).length;\r\n\r\n    const commonWordCount = words.filter((word) =>\r\n      this.commonWords.has(word)\r\n    ).length;\r\n\r\n    return (\r\n      sophisticatedCount /\r\n      words.length /\r\n      Math.max(commonWordCount / words.length, 0.1)\r\n    );\r\n  }\r\n\r\n  private calculateVocabularyRichness(words: string[]): number {\r\n    const uniqueWords = new Set(words);\r\n    const hapaxLegomena = Array.from(uniqueWords).filter(\r\n      (word) => words.filter((w) => w === word).length === 1\r\n    );\r\n\r\n    return hapaxLegomena.length / uniqueWords.size;\r\n  }\r\n\r\n  private calculateContextualConsistency(sentences: string[]): number {\r\n    if (sentences.length < 3) return 1;\r\n\r\n    let consistencyScore = 0;\r\n    const topics = sentences.map((sentence) =>\r\n      this.extractTopicWords(sentence)\r\n    );\r\n\r\n    for (let i = 1; i < topics.length - 1; i++) {\r\n      const prevTopics = new Set(topics[i - 1]);\r\n      const currTopics = new Set(topics[i]);\r\n      const nextTopics = new Set(topics[i + 1]);\r\n\r\n      const allTopics = new Set([...prevTopics, ...currTopics, ...nextTopics]);\r\n      const commonTopics = [...allTopics].filter(\r\n        (topic) =>\r\n          [prevTopics, currTopics, nextTopics].filter((set) => set.has(topic))\r\n            .length >= 2\r\n      );\r\n\r\n      consistencyScore += commonTopics.length / Math.max(allTopics.size, 1);\r\n    }\r\n\r\n    return consistencyScore / Math.max(sentences.length - 2, 1);\r\n  }\r\n\r\n  private extractTopicWords(sentence: string): string[] {\r\n    const words = this.tokenizeWords(sentence);\r\n    return words.filter(\r\n      (word) =>\r\n        word.length > 4 &&\r\n        !this.commonWords.has(word) &&\r\n        !this.transitionWords.includes(word)\r\n    );\r\n  }\r\n\r\n  private calculateAverageWordsPerSentence(sentences: string[]): number {\r\n    if (sentences.length === 0) return 0;\r\n    const totalWords = sentences.reduce(\r\n      (sum, sentence) => sum + sentence.split(/\\s+/).length,\r\n      0\r\n    );\r\n    return totalWords / sentences.length;\r\n  }\r\n\r\n  private calculateSentenceVariability(sentences: string[]): number {\r\n    if (sentences.length < 2) return 0;\r\n\r\n    const lengths = sentences.map((s) => s.split(/\\s+/).length);\r\n    const average = lengths.reduce((a, b) => a + b, 0) / lengths.length;\r\n    const variance =\r\n      lengths.reduce((sum, len) => sum + Math.pow(len - average, 2), 0) /\r\n      lengths.length;\r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  private calculateAdvancedAIScore(metrics: AnalysisMetrics): number {\r\n    let score = 0;\r\n    let totalWeight = 0;\r\n\r\n    // Perplexity analysis (most important)\r\n    const perplexityWeight = 0.25;\r\n    if (metrics.perplexity < 8) {\r\n      // AI text typically has lower perplexity\r\n      score += ((8 - metrics.perplexity) / 8) * perplexityWeight;\r\n    }\r\n    totalWeight += perplexityWeight;\r\n\r\n    // Burstiness analysis\r\n    const burstinessWeight = 0.2;\r\n    if (metrics.burstiness < 0.1) {\r\n      // AI has low burstiness (consistent sentence lengths)\r\n      score += ((0.1 - metrics.burstiness) / 0.1) * burstinessWeight;\r\n    }\r\n    totalWeight += burstinessWeight;\r\n\r\n    // Lexical diversity\r\n    const lexicalWeight = 0.15;\r\n    if (metrics.lexicalDiversity > 0.4 && metrics.lexicalDiversity < 0.7) {\r\n      // AI sweet spot\r\n      score += lexicalWeight;\r\n    }\r\n    totalWeight += lexicalWeight;\r\n\r\n    // Semantic coherence\r\n    const coherenceWeight = 0.12;\r\n    if (metrics.semanticCoherence > 0.3 && metrics.semanticCoherence < 0.8) {\r\n      // AI maintains good coherence\r\n      score += coherenceWeight;\r\n    }\r\n    totalWeight += coherenceWeight;\r\n\r\n    // Transition density\r\n    const transitionWeight = 0.1;\r\n    if (metrics.transitionDensity > 2) {\r\n      // High transition word usage\r\n      score += Math.min(metrics.transitionDensity / 5, 1) * transitionWeight;\r\n    }\r\n    totalWeight += transitionWeight;\r\n\r\n    // Formality index\r\n    const formalityWeight = 0.08;\r\n    if (metrics.formalityIndex > 0.5) {\r\n      // AI tends to be more formal\r\n      score += Math.min(metrics.formalityIndex, 1) * formalityWeight;\r\n    }\r\n    totalWeight += formalityWeight;\r\n\r\n    // N-gram repetition\r\n    const ngramWeight = 0.05;\r\n    if (metrics.nGramRepetition > 0.1) {\r\n      // AI sometimes repeats patterns\r\n      score += Math.min(metrics.nGramRepetition * 2, 1) * ngramWeight;\r\n    }\r\n    totalWeight += ngramWeight;\r\n\r\n    // Punctuation patterns\r\n    const punctuationWeight = 0.05;\r\n    score += metrics.punctuationPatterns * punctuationWeight;\r\n    totalWeight += punctuationWeight;\r\n\r\n    // Normalize score\r\n    return Math.max(0, Math.min(1, score / totalWeight));\r\n  }\r\n\r\n  private generateDetailedReasons(\r\n    metrics: AnalysisMetrics,\r\n    score: number\r\n  ): string[] {\r\n    const reasons: string[] = [];\r\n\r\n    if (metrics.perplexity < 8) {\r\n      reasons.push(\r\n        `Low perplexity (${metrics.perplexity.toFixed(\r\n          2\r\n        )}) suggests predictable word patterns typical of AI`\r\n      );\r\n    }\r\n\r\n    if (metrics.burstiness < 0.1) {\r\n      reasons.push(\r\n        `Low burstiness (${metrics.burstiness.toFixed(\r\n          2\r\n        )}) indicates consistent sentence structure characteristic of AI`\r\n      );\r\n    }\r\n\r\n    if (metrics.lexicalDiversity > 0.4 && metrics.lexicalDiversity < 0.7) {\r\n      reasons.push(\r\n        `Lexical diversity (${metrics.lexicalDiversity.toFixed(\r\n          2\r\n        )}) falls within AI-typical range`\r\n      );\r\n    }\r\n\r\n    if (metrics.transitionDensity > 2) {\r\n      reasons.push(\r\n        `High transition word density (${metrics.transitionDensity.toFixed(\r\n          1\r\n        )}%) characteristic of AI writing`\r\n      );\r\n    }\r\n\r\n    if (metrics.formalityIndex > 0.5) {\r\n      reasons.push(\r\n        `Elevated formality index (${metrics.formalityIndex.toFixed(\r\n          2\r\n        )}) suggests AI-generated content`\r\n      );\r\n    }\r\n\r\n    if (metrics.semanticCoherence > 0.6) {\r\n      reasons.push(\r\n        `High semantic coherence (${metrics.semanticCoherence.toFixed(\r\n          2\r\n        )}) typical of AI optimization`\r\n      );\r\n    }\r\n\r\n    if (metrics.nGramRepetition > 0.1) {\r\n      reasons.push(\r\n        `Repetitive n-gram patterns (${(metrics.nGramRepetition * 100).toFixed(\r\n          1\r\n        )}%) detected`\r\n      );\r\n    }\r\n\r\n    if (score <= 0.4) {\r\n      reasons.push(\"Natural linguistic variation suggests human authorship\");\r\n      reasons.push(\"Irregular patterns inconsistent with AI generation\");\r\n    }\r\n\r\n    if (metrics.vocabularyRichness < 0.3) {\r\n      reasons.push(\"Limited vocabulary richness may indicate AI limitations\");\r\n    }\r\n\r\n    return reasons;\r\n  }\r\n}\r\n\r\n// Export for different environments\r\nconst detector = new AITextDetector();\r\n\r\nexport function detectAIText(text: string): DetectionResult {\r\n  return detector.detectAIText(text);\r\n}\r\n\r\nexport function isAIGenerated(text: string): boolean {\r\n  return detector.detectAIText(text).isAIGenerated;\r\n}\r\n\r\nexport function getConfidenceScore(text: string): number {\r\n  return detector.detectAIText(text).confidence;\r\n}\r\n\r\nexport function getPerplexityScore(text: string): number {\r\n  return detector.detectAIText(text).perplexityScore;\r\n}\r\n\r\nexport function getBurstinessScore(text: string): number {\r\n  return detector.detectAIText(text).burstinessScore;\r\n}\r\n\r\nexport default {\r\n  detectAIText,\r\n  isAIGenerated,\r\n  getConfidenceScore,\r\n  getPerplexityScore,\r\n  getBurstinessScore,\r\n};\r\n\r\nexport type { DetectionResult };\r\n"],"names":[],"mappings":"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"}